*** EVALUATION ***
ANSI-C/cC++ Compiler for HC12 V-5.0.41 Build 10203, Jul 23 2010

    1:  // filename  ***************  LCD.C ****************************** 
    2:  // LCD Display (HD44780) on Port AD,M for the 9S12C32   
    3:  // Jonathan W. Valvano 1/14/07
    4:  
    5:  //  This example accompanies the books
    6:  //   "Embedded Microcomputer Systems: Real Time Interfacing",
    7:  //        Thomson Engineering, copyright (c) 2006,
    8:  //   "Introduction to Embedded Microcomputer Systems: 
    9:  //    Motorola 6811 and 6812 Simulation", Thomson, copyright (c) 2002
   10:  
   11:  // Copyright 2007 by Jonathan W. Valvano, valvano@mail.utexas.edu 
   12:  //    You may use, edit, run or distribute this file 
   13:  //    as long as the above copyright notice remains 
   14:  
   15:  /*   
   16:    size is 2*16 
   17:    if do not need to read busy, then you can tie R/W=ground 
   18:    ground = pin 1    Vss
   19:    power  = pin 2    Vdd   +5V
   20:    ground = pin 3    Vlc   grounded for highest contrast
   21:    PM5    = pin 4    RS    (1 for data, 0 for control/status)
   22:    PAD0   = pin 5    R/W   (1 for read, 0 for write)
   23:    PM4    = pin 6    E     (enable)
   24:    PM3    = pin 14   DB7   (4-bit data)
   25:    PM2    = pin 13   DB6
   26:    PM1    = pin 12   DB5
   27:    PM0    = pin 11   DB4
   28:  16 characters are configured as 2 rows of 8
   29:  addr  00 01 02 03 04 05 06 07 40 41 42 43 44 45 46 47
   30:  */
   31:  
   32:  #include <mc9s12c32.h>  /* derivative information */
   33:  #include "LCD.H"
   34:  
   35:  static unsigned short OpenFlag=0;
   36:  
   37:  //---------------------wait---------------------
   38:  // time delay
   39:  // Input: time in 0.667usec
   40:  // Output: none
   41:  void static wait(unsigned short delay){ 
*** EVALUATION ***

Function: wait
Source  : C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\Sources\lcd.c
Options : -Cc -D_HCS12 -D__NO_FLOAT__ -D_HCS12_SERIALMON -Env"GENPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\prm;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\cmd;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\Sources;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\include" -Env"OBJPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin" -Env"TEXTPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\LCD_Data\Monitor\ObjectCode\lcd.c.o" -WmsgSd1106

  0000 6cac         [2]     STD   4,-SP
   42:  unsigned short startTime;
   43:    startTime = TCNT;
  0002 dc00         [3]     LDD   _TCNT
  0004 6c82         [2]     STD   2,SP
   44:    while((TCNT-startTime) <= delay){}  
  0006 dc00         [3]     LDD   _TCNT
  0008 a382         [3]     SUBD  2,SP
  000a ac80         [3]     CPD   0,SP
  000c 23f8         [3/1]   BLS   *-6 ;abs = 0006
   45:  }
  000e 1b84         [2]     LEAS  4,SP
  0010 3d           [5]     RTS   
   46:    
   47:  //---------------------outCsr---------------------
   48:  // sends one command code to the LCD control/status
   49:  // Input: command is 8-bit function to execute
   50:  // Output: none
   51:  static void outCsr(unsigned char command){
*** EVALUATION ***

Function: outCsr
Source  : C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\Sources\lcd.c
Options : -Cc -D_HCS12 -D__NO_FLOAT__ -D_HCS12_SERIALMON -Env"GENPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\prm;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\cmd;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\Sources;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\include" -Env"OBJPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin" -Env"TEXTPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\LCD_Data\Monitor\ObjectCode\lcd.c.o" -WmsgSd1106

  0000 37           [2]     PSHB  
   52:    PTM = 0x0F&(command>>4); // ms nibble, E=0, RS=0
  0001 54           [1]     LSRB  
  0002 54           [1]     LSRB  
  0003 54           [1]     LSRB  
  0004 54           [1]     LSRB  
  0005 070d         [4]     BSR   *+15 ;abs = 0014
   53:    PTM |= 0x10;             // E goes 0,1
   54:    PTM &= ~0x10;            // E goes 1,0
   55:    PTM = command&0x0F;      // ls nibble, E=0, RS=0
  0007 e680         [3]     LDAB  0,SP
  0009 c40f         [1]     ANDB  #15
  000b 0707         [4]     BSR   *+9 ;abs = 0014
   56:    PTM |= 0x10;             // E goes 0,1
   57:    PTM &= ~0x10;            // E goes 1,0
   58:    wait(135);               // blind cycle 90 us wait
  000d c687         [1]     LDAB  #135
  000f 87           [1]     CLRA  
  0010 0700         [4]     BSR   wait
   59:  }
  0012 32           [3]     PULA  
  0013 3d           [5]     RTS   
  0014 7b0000       [3]     STAB  _PTM
  0017 1c000010     [4]     BSET  _PTM,#16
  001b 1d000010     [4]     BCLR  _PTM,#16
  001f 3d           [5]     RTS   
   60:  
   61:  //---------------------LCD_Clear---------------------
   62:  // clear the LCD display, send cursor to home
   63:  // Input: none
   64:  // Output: true if successful
   65:  short LCD_Clear(void){
*** EVALUATION ***

Function: LCD_Clear
Source  : C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\Sources\lcd.c
Options : -Cc -D_HCS12 -D__NO_FLOAT__ -D_HCS12_SERIALMON -Env"GENPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\prm;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\cmd;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\Sources;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\include" -Env"OBJPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin" -Env"TEXTPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\LCD_Data\Monitor\ObjectCode\lcd.c.o" -WmsgSd1106

   66:    if(OpenFlag==0){
  0000 fc0000       [3]     LDD   OpenFlag
  0003 2601         [3/1]   BNE   *+3 ;abs = 0006
   67:      return 0;  // not open
  0005 3d           [5]     RTS   
   68:    }
   69:    outCsr(0x01);        // Clear Display
  0006 c601         [1]     LDAB  #1
  0008 0700         [4]     BSR   outCsr
   70:    wait(2460);          // 1.64ms wait
  000a cc099c       [2]     LDD   #2460
  000d 0700         [4]     BSR   wait
   71:    outCsr(0x02);        // Cursor to home
  000f c602         [1]     LDAB  #2
  0011 0700         [4]     BSR   outCsr
   72:    wait(2460);          // 1.64ms wait
  0013 cc099c       [2]     LDD   #2460
  0016 0700         [4]     BSR   wait
   73:    return 1;		         // success
  0018 c601         [1]     LDAB  #1
  001a 87           [1]     CLRA  
   74:  }
  001b 3d           [5]     RTS   
   75:  
   76:  //---------------------LCD_Open---------------------
   77:  // initialize the LCD display, called once at beginning
   78:  // Input: display determines increment and shift option
   79:  //        cursor determines cursor options
   80:  //        move determines cursor movement
   81:  //        size sets display size
   82:  // Output: true if successful
   83:  short LCD_Open(char display, char cursor, char move, char size){
*** EVALUATION ***

Function: LCD_Open
Source  : C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\Sources\lcd.c
Options : -Cc -D_HCS12 -D__NO_FLOAT__ -D_HCS12_SERIALMON -Env"GENPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\prm;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\cmd;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\Sources;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\include" -Env"OBJPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin" -Env"TEXTPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\LCD_Data\Monitor\ObjectCode\lcd.c.o" -WmsgSd1106

  0000 37           [2]     PSHB  
   84:  int i;
   85:    if(OpenFlag){
  0001 fc0000       [3]     LDD   OpenFlag
  0004 2704         [3/1]   BEQ   *+6 ;abs = 000a
   86:      return 0;      // error if already open
  0006 c7           [1]     CLRB  
  0007 87           [1]     CLRA  
  0008 205f         [3]     BRA   *+97 ;abs = 0069
   87:    }
   88:    DDRAD |= 0x01;   // PortAD bit 0 isoutput to R/W
  000a 1c000001     [4]     BSET  _DDRAD,#1
   89:    ATDDIEN |= 0x01; // enable AD bit 0 digital driver  
  000e 4c0001       [4]     BSET  _ATDDIEN,#1
   90:    PTAD &= ~0x01;   // PAD0=R/W=0 means write
  0011 1d000001     [4]     BCLR  _PTAD,#1
   91:    DDRM = 0x3F;     // PM5-0 output to LCD
  0015 cc803f       [2]     LDD   #32831
  0018 7b0000       [3]     STAB  _DDRM
   92:    TSCR1 = 0x80;    // Enable TCNT, 24MHz boot mode, 4MHz in run mode
  001b 5a00         [2]     STAA  _TSCR1
   93:    TSCR2 = 0x04;    // divide by 16 TCNT prescale, TCNT at 667nsec
  001d c604         [1]     LDAB  #4
  001f 5b00         [2]     STAB  _TSCR2
   94:    PACTL = 0;       // timer prescale used for TCNT
  0021 790000       [3]     CLR   _PACTL
   95:  /* Bottom three bits of TSCR2 (PR2,PR1,PR0) determine TCNT period
   96:      divide  at 24MHz    
   97:  000   1     42ns  TOF  2.73ms  
   98:  001   2     84ns  TOF  5.46ms  
   99:  010   4    167ns  TOF  10.9ms      
  100:  011   8    333ns  TOF  21.8ms 	 
  101:  100  16    667ns  TOF  43.7ms 	 
  102:  101  32   1.33us  TOF  87.4ms		 
  103:  110  64   2.67us  TOF 174.8ms   
  104:  111 128   5.33us  TOF 349.5ms    */ 
  105:  // Be careful, TSCR1 and TSCR2 maybe set in other rituals
  106:    for(i=100;i;i--){
  0024 ce0064       [2]     LDX   #100
  107:      wait(1500);    // 100ms to allow LCD powerup
  0027 cc05dc       [2]     LDD   #1500
  002a 34           [2]     PSHX  
  002b 0700         [4]     BSR   wait
  002d 30           [3]     PULX  
  002e 0435f6       [3]     DBNE  X,*-7 ;abs = 0027
  108:    }
  109:    PTM = 0x02;		 // DL=0 4-bit, RS=0 (command), E=0
  0031 c602         [1]     LDAB  #2
  0033 7b0000       [3]     STAB  _PTM
  110:    PTM |= 0x10;   // E goes 0,1
  0036 1c000010     [4]     BSET  _PTM,#16
  111:    PTM &= ~0x10;  // E goes 1,0
  003a 1d000010     [4]     BCLR  _PTM,#16
  112:    wait(135);     // 90 us wait
  003e c687         [1]     LDAB  #135
  0040 87           [1]     CLRA  
  0041 160000       [4]     JSR   wait
  113:    outCsr(0x04+display); // I/D Increment, S displayshift
  0044 e685         [3]     LDAB  5,SP
  0046 cb04         [1]     ADDB  #4
  0048 160000       [4]     JSR   outCsr
  114:    outCsr(0x0C+cursor);  // D=1 displayon, C cursoron/off, B blink on/off
  004b e684         [3]     LDAB  4,SP
  004d cb0c         [1]     ADDB  #12
  004f 160000       [4]     JSR   outCsr
  115:    outCsr(0x14+move);    // S/C cursormove, R/L shiftright
  0052 e683         [3]     LDAB  3,SP
  0054 cb14         [1]     ADDB  #20
  0056 160000       [4]     JSR   outCsr
  116:    outCsr(0x20+size);    // DL=0 4bit, N 1/2 line, F 5by7 or 5by10
  0059 e680         [3]     LDAB  0,SP
  005b cb20         [1]     ADDB  #32
  005d 160000       [4]     JSR   outCsr
  117:    OpenFlag = 1;         // device open
  0060 c601         [1]     LDAB  #1
  0062 87           [1]     CLRA  
  0063 7c0000       [3]     STD   OpenFlag
  118:    return LCD_Clear();   // clear display
  0066 160000       [4]     JSR   LCD_Clear
  119:  }
  0069 1b81         [2]     LEAS  1,SP
  006b 3d           [5]     RTS   
  120:  
  121:  //---------------------LCD_OutChar---------------------
  122:  // sends one ASCII to the LCD display
  123:  // Input: letter is ASCII code
  124:  // Output: true if successful
  125:  short LCD_OutChar(unsigned char letter){
*** EVALUATION ***

Function: LCD_OutChar
Source  : C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\Sources\lcd.c
Options : -Cc -D_HCS12 -D__NO_FLOAT__ -D_HCS12_SERIALMON -Env"GENPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\prm;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\cmd;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\Sources;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\include" -Env"OBJPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin" -Env"TEXTPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\LCD_Data\Monitor\ObjectCode\lcd.c.o" -WmsgSd1106

  0000 37           [2]     PSHB  
  126:    if(OpenFlag==0){
  0001 fc0000       [3]     LDD   OpenFlag
  0004 2602         [3/1]   BNE   *+4 ;abs = 0008
  127:      return 0;  // not open
  0006 2017         [3]     BRA   *+25 ;abs = 001f
  128:    }
  129:    PTM = 0x20+(0x0F&(letter>>4));        // ms nibble, E=0, RS=0
  0008 e680         [3]     LDAB  0,SP
  000a 54           [1]     LSRB  
  000b 54           [1]     LSRB  
  000c 54           [1]     LSRB  
  000d 54           [1]     LSRB  
  000e 0712         [4]     BSR   *+20 ;abs = 0022
  130:    PTM |= 0x10;       // E goes 0,1
  131:    PTM &= ~0x10;      // E goes 1,0
  132:    PTM = 0x20+(letter&0x0F);        // ls nibble, E=0, RS=0
  0010 e680         [3]     LDAB  0,SP
  0012 c40f         [1]     ANDB  #15
  0014 070c         [4]     BSR   *+14 ;abs = 0022
  133:    PTM |= 0x10;       // E goes 0,1
  134:    PTM &= ~0x10;      // E goes 1,0
  135:    wait(135);         // 90 us wait
  0016 c687         [1]     LDAB  #135
  0018 87           [1]     CLRA  
  0019 160000       [4]     JSR   wait
  136:    return 1;	         // success
  001c c601         [1]     LDAB  #1
  001e 87           [1]     CLRA  
  137:  }
  001f 1b81         [2]     LEAS  1,SP
  0021 3d           [5]     RTS   
  0022 cb20         [1]     ADDB  #32
  0024 7b0000       [3]     STAB  _PTM
  0027 1c000010     [4]     BSET  _PTM,#16
  002b 1d000010     [4]     BCLR  _PTM,#16
  002f 3d           [5]     RTS   
  138:  
  139:  //---------------------LCD_OutString--------------
  140:  // Display String
  141:  // Input: pointer to NULL-terminationed ASCII string 
  142:  // Output: true if successful
  143:  short LCD_OutString(char *pt){ 
*** EVALUATION ***

Function: LCD_OutString
Source  : C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\Sources\lcd.c
Options : -Cc -D_HCS12 -D__NO_FLOAT__ -D_HCS12_SERIALMON -Env"GENPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\prm;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\cmd;C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\Sources;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.2\lib\HC12c\include" -Env"OBJPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin" -Env"TEXTPATH=C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Ismael\Documents\- Micros 2\Programas\LCD_9S12\LCD_Data\Monitor\ObjectCode\lcd.c.o" -WmsgSd1106

  0000 3b           [2]     PSHD  
  144:    if(OpenFlag==0){
  0001 fc0000       [3]     LDD   OpenFlag
  0004 260f         [3/1]   BNE   *+17 ;abs = 0015
  145:      return 0;  // not open
  0006 2005         [3]     BRA   *+7 ;abs = 000d
  146:    }
  147:    while(*pt){
  148:      if(LCD_OutChar((unsigned char)*pt)==0){
  0008 0700         [4]     BSR   LCD_OutChar
  000a 046403       [3]     TBNE  D,*+6 ;abs = 0010
  149:        return 0;
  000d c7           [1]     CLRB  
  000e 200d         [3]     BRA   *+15 ;abs = 001d
  150:      }
  151:      pt++;
  0010 ee80         [3]     LDX   0,SP
  0012 08           [1]     INX   
  0013 6e80         [2]     STX   0,SP
  0015 ee80         [3]     LDX   0,SP
  0017 e600         [3]     LDAB  0,X
  0019 26ed         [3/1]   BNE   *-17 ;abs = 0008
  152:    }
  153:    return 1;	  // success
  001b c601         [1]     LDAB  #1
  001d 87           [1]     CLRA  
  154:  }
  001e 30           [3]     PULX  
  001f 3d           [5]     RTS   
  155:  
  156:  
  157:  
  158:  
  159:  
